#include <IRremote.h>                    //Library for IR remote
#include <LedControl.h>                  //Library for dot matrix

#define IR_RECEIVE_PIN 2                 //Values to be interpreted from IR remote
#define IR_BUTTON_0 22      
#define IR_BUTTON_1 12
#define IR_BUTTON_2 24
#define IR_BUTTON_3 94
#define IR_BUTTON_4 8
#define IR_BUTTON_5 28
#define IR_BUTTON_6 90
#define IR_BUTTON_7 66
#define IR_BUTTON_8 82
#define IR_BUTTON_9 74

int button = 3;                          //Where the button was wired

int red =11;                              //Where the LEDs are wired
int yellow = 12;
int green = 13;

bool stateyellow = false;                 //Starting state is green
bool stategreen = true;
bool statered = false;

int DIN = 10;                              //These pins are for the dot matrix
int CS = 7;
int CLK = 9;

int z = 0;                                //Counter
int buttonpress = 0;                      //variable for storing status of push button

LedControl lc=LedControl(DIN, CLK, CS,0);    //function for dot matrix

// X Shape
byte nf[8]= {B10000001,B01000010,B00100100,B00011000,B00011000,B00100100,B01000010,B10000001};      //patterns
// Target
byte sf[8]{B00010000,B00010000,B00111000,B11111111,B00111000,B00010000,B00010000,B00010000};        //patterns
// Happy
byte hf[8]= {B00111100,B01000010,B10100101,B10000001,B10100101,B10011001,B01000010,B00111100};      //patterns


void setup() {

  pinMode(button, INPUT);     
  pinMode(red, OUTPUT);
  pinMode(yellow, OUTPUT);
  pinMode(green,  OUTPUT);

  lc.shutdown(0,false);         //initalizing dot matrix
  lc.setIntensity(0,8);
  lc.clearDisplay(0);

  Serial.begin(9600);
  IrReceiver.begin(IR_RECEIVE_PIN);         //initializing IR receiver
}



void loop() {

if (digitalRead(button) == HIGH){                            //Store button status in buttonpress variable
  buttonpress = 1;
}
else if (digitalRead(button) == LOW){       
  buttonpress = 0;
}



if (stategreen == true){                                     //Default state
digitalWrite(red, LOW);
digitalWrite(yellow, LOW);
digitalWrite(green, HIGH);
lc.clearDisplay(0);
}

else if (stateyellow == true){                              //Yellow state, waiting 5 seconds and then switching to red
  
    if (z<=100) {
  digitalWrite(red, LOW);
  digitalWrite(yellow, HIGH);
  digitalWrite(green, LOW);
      delay(50);
       z++;
       
       if (buttonpress == 1) {                            //for an early abortion
            stategreen = true;
            stateyellow = false;
            statered = false;
            }
      }
   
    if (z>80) {
      z=0;
      statered = true;
      stateyellow = false;
      stategreen = false;
    }
  }


else if (statered == true){                               //Red state. Staying here unless button is pressed

  digitalWrite(red, HIGH);
  digitalWrite(yellow, LOW);
  digitalWrite(green, LOW);

       if (buttonpress == 1) {                            //to leave state
            stategreen = true;
            stateyellow = false;
            statered = false;
            }
}

    
  if (IrReceiver.decode()) {                             //Containing all possible IR commands
    IrReceiver.resume();
    int command = IrReceiver.decodedIRData.command;


    switch (command) {
       case IR_BUTTON_0: {
          Serial.println("Pressed on button 0");
      stategreen = true;
      stateyellow = false;
      statered = false;
      break;
         }
         
      case IR_BUTTON_1: {
          
      Serial.println("Pressed on button 1");
      stateyellow = true;
      stategreen = false;
      statered = false;
      drawHappy();
            break;
      
        }

        
      case IR_BUTTON_2: {
      Serial.println("Pressed on button 2");
      stateyellow = true;
      stategreen = false;
      statered = false;
      drawX();
            break;
      }
      
      case IR_BUTTON_3: {
      Serial.println("Pressed on button 3");
      stateyellow = true;
      stategreen = false;
      statered = false;
      drawTarget();
            break;
        }

      case IR_BUTTON_4: {
      Serial.println("Pressed on button 4");
      stateyellow = true;
      stategreen = false;
      statered = false;
      drawHappy();
            break;

        }
      case IR_BUTTON_5: {
      Serial.println("Pressed on button 5");
      stateyellow = true;
      stategreen = false;
      statered = false;
      drawX();
            break;
        }
        

        case IR_BUTTON_6: {
      Serial.println("Pressed on button 6");
      stateyellow = true;
      stategreen = false;
      statered = false;
      drawTarget();
            break;
      }

      case IR_BUTTON_7: {
      Serial.println("Pressed on button 7");
      stateyellow = true;
      stategreen = false;
      statered = false;
      drawHappy();   
            break;    
       }
       
      case IR_BUTTON_8: {
      Serial.println("Pressed on button 8");
      stateyellow = true;
      stategreen = false;
      statered = false;
      drawX();
            break;
        }

        case IR_BUTTON_9: {
      Serial.println("Pressed on button 9");
      stateyellow = true;
      stategreen = false;
      statered = false;
      drawTarget();
            break;
      }

      default:{
         break;
               }
      
      break;
    }
}

}

void drawTarget(){
                                       // Display Target
  lc.setRow(0,0,sf[0]);
  lc.setRow(0,1,sf[1]);
  lc.setRow(0,2,sf[2]);
  lc.setRow(0,3,sf[3]);
  lc.setRow(0,4,sf[4]);
  lc.setRow(0,5,sf[5]);
  lc.setRow(0,6,sf[6]);
  lc.setRow(0,7,sf[7]);
}

void drawX(){
                                                     //Display X
  lc.setRow(0,0,nf[0]);
  lc.setRow(0,1,nf[1]);
  lc.setRow(0,2,nf[2]);
  lc.setRow(0,3,nf[3]);
  lc.setRow(0,4,nf[4]);
  lc.setRow(0,5,nf[5]);
  lc.setRow(0,6,nf[6]);
  lc.setRow(0,7,nf[7]);
}

 void drawHappy(){
                                                        // Display Happy Face
  lc.setRow(0,0,hf[0]);
  lc.setRow(0,1,hf[1]);
  lc.setRow(0,2,hf[2]);
  lc.setRow(0,3,hf[3]);
  lc.setRow(0,4,hf[4]);
  lc.setRow(0,5,hf[5]);
  lc.setRow(0,6,hf[6]);
  lc.setRow(0,7,hf[7]);
}
